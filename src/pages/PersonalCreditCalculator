import { useState } from 'react'
import {
  Box,
  VStack,
  Heading,
  FormControl,
  FormLabel,
  Input,
  Select,
  Button,
  Text,
  useToast,
  Card,
  CardBody,
  SimpleGrid,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Progress,
} from '@chakra-ui/react'

const PersonalCreditCalculator = () => {
  const [amount, setAmount] = useState('')
  const [term, setTerm] = useState('')
  const [purpose, setPurpose] = useState('')
  const [results, setResults] = useState<any>(null)
  const toast = useToast()

  const terms = [
    { value: '12', label: '12 meses' },
    { value: '24', label: '24 meses' },
    { value: '36', label: '36 meses' },
    { value: '48', label: '48 meses' },
    { value: '60', label: '60 meses' },
  ]

  const purposes = [
    { value: 'emergencia', label: 'Emergencia' },
    { value: 'consolidacion', label: 'Consolidación de deudas' },
    { value: 'hogar', label: 'Mejoras al hogar' },
    { value: 'educacion', label: 'Educación' },
    { value: 'negocio', label: 'Negocio' },
    { value: 'otro', label: 'Otro' },
  ]

  const calculateCredit = () => {
    const loanAmount = parseFloat(amount)
    const termMonths = parseInt(term)
    const annualRate = 0.24 // 24% annual rate
    const monthlyRate = annualRate / 12

    if (loanAmount < 1000) {
      toast({
        title: 'Error',
        description: 'El monto mínimo del préstamo es $1,000',
        status: 'error',
        duration: 3000,
        isClosable: true,
      })
      return
    }

    // Calculate monthly payment using the formula: P = L[c(1 + c)^n]/[(1 + c)^n - 1]
    const monthlyPayment = (loanAmount * monthlyRate * Math.pow(1 + monthlyRate, termMonths)) / 
      (Math.pow(1 + monthlyRate, termMonths) - 1)

    const totalPayment = monthlyPayment * termMonths
    const totalInterest = totalPayment - loanAmount

    // Generate payment schedule
    const schedule = []
    let remainingBalance = loanAmount
    for (let i = 1; i <= termMonths; i++) {
      const interestPayment = remainingBalance * monthlyRate
      const principalPayment = monthlyPayment - interestPayment
      remainingBalance -= principalPayment

      schedule.push({
        month: i,
        payment: monthlyPayment,
        principal: principalPayment,
        interest: interestPayment,
        balance: remainingBalance,
      })
    }

    // Calculate approval probability based on amount and term
    const approvalProbability = Math.min(
      100,
      Math.max(
        0,
        100 - (loanAmount / 100000) * 20 - (termMonths / 60) * 10
      )
    )

    setResults({
      monthlyPayment,
      totalPayment,
      totalInterest,
      schedule,
      approvalProbability,
    })
  }

  return (
    <Box>
      <VStack spacing={8} align="stretch">
        <Box textAlign="center">
          <Heading size="xl" mb={4}>
            Calculadora de Crédito Personal
          </Heading>
          <Text fontSize="lg" color="gray.600">
            Simula tu crédito personal y conoce tus opciones de financiamiento
          </Text>
        </Box>

        <Card>
          <CardBody>
            <VStack spacing={6}>
              <FormControl>
                <FormLabel>Monto del préstamo</FormLabel>
                <Input
                  type="number"
                  value={amount}
                  onChange={(e) => setAmount(e.target.value)}
                  placeholder="Ingresa el monto"
                />
              </FormControl>

              <FormControl>
                <FormLabel>Plazo</FormLabel>
                <Select value={term} onChange={(e) => setTerm(e.target.value)} placeholder="Selecciona el plazo">
                  {terms.map((t) => (
                    <option key={t.value} value={t.value}>
                      {t.label}
                    </option>
                  ))}
                </Select>
              </FormControl>

              <FormControl>
                <FormLabel>Propósito</FormLabel>
                <Select value={purpose} onChange={(e) => setPurpose(e.target.value)} placeholder="Selecciona el propósito">
                  {purposes.map((p) => (
                    <option key={p.value} value={p.value}>
                      {p.label}
                    </option>
                  ))}
                </Select>
              </FormControl>

              <Button colorScheme="blue" onClick={calculateCredit} width="full">
                Calcular
              </Button>
            </VStack>
          </CardBody>
        </Card>

        {results && (
          <Card>
            <CardBody>
              <VStack spacing={6}>
                <Box width="full">
                  <Text mb={2}>Probabilidad de aprobación</Text>
                  <Progress value={results.approvalProbability} colorScheme="blue" size="lg" borderRadius="md" />
                  <Text mt={2} textAlign="right" color="gray.600">
                    {results.approvalProbability.toFixed(1)}%
                  </Text>
                </Box>

                <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6} width="full">
                  <Stat>
                    <StatLabel>Pago mensual</StatLabel>
                    <StatNumber>${results.monthlyPayment.toFixed(2)}</StatNumber>
                    <StatHelpText>Mensual</StatHelpText>
                  </Stat>
                  <Stat>
                    <StatLabel>Total a pagar</StatLabel>
                    <StatNumber>${results.totalPayment.toFixed(2)}</StatNumber>
                    <StatHelpText>Incluye intereses</StatHelpText>
                  </Stat>
                  <Stat>
                    <StatLabel>Intereses totales</StatLabel>
                    <StatNumber>${results.totalInterest.toFixed(2)}</StatNumber>
                    <StatHelpText>Costos financieros</StatHelpText>
                  </Stat>
                  <Stat>
                    <StatLabel>Tasa anual</StatLabel>
                    <StatNumber>24%</StatNumber>
                    <StatHelpText>Tasa fija</StatHelpText>
                  </Stat>
                </SimpleGrid>

                <Box width="full" overflowX="auto">
                  <Table variant="simple">
                    <Thead>
                      <Tr>
                        <Th>Mes</Th>
                        <Th isNumeric>Pago</Th>
                        <Th isNumeric>Capital</Th>
                        <Th isNumeric>Interés</Th>
                        <Th isNumeric>Saldo</Th>
                      </Tr>
                    </Thead>
                    <Tbody>
                      {results.schedule.map((payment: any) => (
                        <Tr key={payment.month}>
                          <Td>{payment.month}</Td>
                          <Td isNumeric>${payment.payment.toFixed(2)}</Td>
                          <Td isNumeric>${payment.principal.toFixed(2)}</Td>
                          <Td isNumeric>${payment.interest.toFixed(2)}</Td>
                          <Td isNumeric>${payment.balance.toFixed(2)}</Td>
                        </Tr>
                      ))}
                    </Tbody>
                  </Table>
                </Box>
              </VStack>
            </CardBody>
          </Card>
        )}
      </VStack>
    </Box>
  )
}

export default PersonalCreditCalculator
